<pre>
Warehouse Class Psuedocode (Write-up)

Suppose you create Warehouse A with room for 3 pallets but only allowing 2 of any item: 
Warehouse A = new Warehouse(3, 2);
Starting contents: [_, _, _] limit 2
// int emptySpace = 3 (Should I count the 0's in the warehouse array?)

Warehouse A then receives 3 pallets of item 1. You can only hold 2 of any item, so your method returns 1 to say that it left one behind: 
New contents: [1, 1, _] (3 - 2 that we added is 1 that we leave behind)
A.receive(1, 3) returns 1
// 1) We want our receive method to check that the number we are receiving is below or equal the limit.
// 2) We need to check our availible empty spaces in the warehouse object and compare with our receive amount.
// 3) If we have availible empty spaces, then we will accept the pallets of items.
// 4) Else, if there are no space availible, we will return the entire shipment.
// Looks like we can try pallets recieved - emptySpace as the return?
// emptySpace = 1 (Should emptySpace be a variable for each warehouse object?)
// Make a for loop to count the 0's in the warehouse array after each receive?

Warehouse A receives 1 pallet of item 2. Your method returns 0 to say it left nothing behind:
New contents: [1, 1, 2] (1 - 1 = 0)
A.receive(2, 1) returns 0
// 1) We are receiving an item below our limit.
// 2) We have availible space for the pallet. Accept the pallets in the warehouse.
// 3) Return pallets received (1) - emptySpace(1) = 0, no more empty space.
// 4) What is the best way to track inventory? After recieving update the warehouse array?
// 5) Another array for itemNumber? Maybe?

Warehouse A is requested to ship 1 pallet of item 1. Your method returns 1 to say that it shipped that one pallet:
New contents: [_, 1, 2] (removed 1)
A.ship(1, 1) returns 1
// 1) Check our inventory in the warehouse for the itemNumber code.
// 2) If we do not have the itemNumber, then return 0.
// 3) If we have the itemNumber, how many items do we have?
// 4) Check if we have the availible number of items to ship.
// 5) If not, then ship all the items that are in the warehouse.
// 6) Update the warehouse array for items that were shipped. How do I keep track of multiple items?
// 6.5) Fill in the shipped items with 0's to designate an empty space.
// 7) Do I need to organize this array? No idea how to do that...
// 8) Count the numbers of emptySpace in the warehouse. emptySpace = 1.

Warehouse A receives 2 pallets of item 1. Your method returns 1, since it leaves 1 behind after fitting 1 (which happens to be under the limit).
New contents: [1, 1, 2] (2 - 1 = 1) 
A.receive(1, 2)
// 1) Only 1 space was empty. We can only take 1 pallet and send back the rest.
// 2) emptySpace = 0 again
// 3) Inventory 1, 2 (maybe have an inventory array to keep track of items)

Warehouse A receives 1 pallet of item 4. Your method returns 1 â€“ it has no room so it leaves that one behind.
A.receive(4, 1)
New contents: [1, 1, 2]
// 1) No room, send it back.

Warehouse A is requested to ship 2 pallets of item 1. Your method returns 2 to say it shipped the last 2 pallets of the item requested.
New contents: [_, _, 2] (removed 2)
A.ship(1, 2)


Warehouse A receives 2 pallets of item 2. Your method returns 1, since it already had one, so it only stores one more.
New contents: [_, 2, 2] (2 - 1 = 1)


Possible plan: 
1) Keep track of emptySpace
2) Keep track of inventory for itemNumber
3) Keep track of itemNumbers in the warehouse
4) Update warehouse array whenever there is a change. After checking the parameters. Otherwise we can get away with not updating the array.
5) Modifiers everything private except the methods.
</pre>
